import os

variables = ARGUMENTS.copy()        # command line arguments are in the global ARGUMENTS dictionary
#vars = Variables(variables)
vars = Variables(args=variables)

vars.Add(EnumVariable('BUILD_TYPE', 'The build type, according to that different compiler options will be set. '\
                      '(Shortcuts: ''d'',''r'')', 'release', allowed_values=('debug', 'release'), ignorecase = 2, 
          map={'d':'debug', 'r':'release'}))
          
env = Environment(variables = vars, ENV = os.environ)

# -----------------------------------------------
# depending on the variable BUILD_TYPE either build with debug or release settings and link corresponding version of core
if env["BUILD_TYPE"] == "debug":
  
  # debug build
  variant_dir = "build_debug"           # folder of build
  env.MergeFlags('-DDEBUG -ggdb3 -g3 -Og -std=c++14 -Werror -Wunused-variable -DDEBUG -DELPP_FEATURE_CRASH_LOG -fstack-check')   # gcc flags, will be sorted automatically into linker and compiler flags
  
else:
  # release build
  variant_dir = 'build_release'         # folder of build
  env.MergeFlags('-O2 -march=native -std=c++14 -Wunused-variable -DNDEBUG')   # gcc flags, will be sorted automatically into linker and compiler flags
  
env.MergeFlags('-ludev -Wunused-variable -I../hidapi/hidapi -isystem dependencies/include -I/usr/include/libusb-1.0 -g')
env.Append(CPPPATH = ["src"])

# call SConscript file for the actual build in the specified build directory variant_dir
SConscript(dirs=".",
           variant_dir=variant_dir,
           duplicate=False,
           exports="env")
